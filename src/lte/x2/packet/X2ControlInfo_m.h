//
// Generated file, do not edit! Created by nedtool 5.5 from lte/x2/packet/X2ControlInfo.msg.
//

#ifndef __X2CONTROLINFO_M_H
#define __X2CONTROLINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



class X2ControlInfoTag;
#include "inet/common/TagBase_m.h" // import inet.common.TagBase

// cplusplus {{
    #include "lte/common/LteCommon.h"
    typedef std::list<X2NodeId> DestinationIdList;
// }}

/**
 * Class generated from <tt>lte/x2/packet/X2ControlInfo.msg:38</tt> by nedtool.
 * <pre>
 * //
 * // \@class LteX2ControlInfo
 * //
 * // This class contains:
 * // - Source X2 ID
 * // - List of destionation IDs
 * // - init flag
 * //
 * class X2ControlInfoTag extends inet::TagBase
 * {
 *     uint16 sourceId;                          // Source X2NodeId
 *     DestinationIdList destIdList;             // List of destination X2NodeId
 * 
 *     bool init = false;
 * }
 * </pre>
 */
class INET_API X2ControlInfoTag : public ::inet::TagBase
{
  protected:
    uint16_t sourceId = 0;
    DestinationIdList destIdList;
    bool init = false;

  private:
    void copy(const X2ControlInfoTag& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const X2ControlInfoTag&);

  public:
    X2ControlInfoTag();
    X2ControlInfoTag(const X2ControlInfoTag& other);
    virtual ~X2ControlInfoTag();
    X2ControlInfoTag& operator=(const X2ControlInfoTag& other);
    virtual X2ControlInfoTag *dup() const override {return new X2ControlInfoTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getSourceId() const;
    virtual void setSourceId(uint16_t sourceId);
    virtual const DestinationIdList& getDestIdList() const;
    virtual DestinationIdList& getDestIdListForUpdate() { return const_cast<DestinationIdList&>(const_cast<X2ControlInfoTag*>(this)->getDestIdList());}
    virtual void setDestIdList(const DestinationIdList& destIdList);
    virtual bool getInit() const;
    virtual void setInit(bool init);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const X2ControlInfoTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, X2ControlInfoTag& obj) {obj.parsimUnpack(b);}

#endif // ifndef __X2CONTROLINFO_M_H

