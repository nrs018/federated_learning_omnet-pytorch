//
// Generated file, do not edit! Created by nedtool 5.5 from lte/stack/phy/packet/AirFrame.msg.
//

#ifndef __AIRFRAME_M_H
#define __AIRFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



class AirFrame;
// cplusplus {{
#include "inet/common/INETDefs.h"
#include "inet/common/geometry/common/Coord.h"
#include "lte/stack/phy/packet/ModulationType.h"
// }}

/**
 * Class generated from <tt>lte/stack/phy/packet/AirFrame.msg:54</tt> by nedtool.
 * <pre>
 * //
 * // Format of the messages that are sent to the channel
 * //
 * // subclass if you want to create your own ~AirFrame message class
 * //
 * // This message format is used to send a packet from a snrEval module
 * // to the channel. All other snrEval modules that can 'hear' this
 * // message can evaluate noise, interference etc. from the information
 * // contained in this message:
 * //
 * // If you need more fields for whatever reason, please do NOT create
 * // your own message! Just extend (subclass) this message format (see Omnet
 * // manual,chapter Messages - Inheritance among message classes).
 * //
 * // This component has been taken over from Mobility Framework 1.0a5.
 * //
 * // \@todo As soon as opp_msgc also supports pointers we should replace
 * // the id with a pointer to the nodes coordinates itself.
 * // \@author Marc Loebbers
 * //
 * packet AirFrame extends cPacket
 * {
 *     double pSend; // Power with which this packet is transmitted
 *     int channelNumber; // Channel on which the packet is sent
 *     simtime_t duration; // Time it takes to transmit the packet, in seconds
 *     double bitrate;
 *     double snr;
 *     double lossRate;
 *     double powRec; // Power in the receiver
 *     inet::Coord senderPos;
 *     // multi gate support
 *     double carrierFrequency; //
 *     double bandwidth;
 *     ModulationType modulationType;
 * }
 * </pre>
 */
class INET_API AirFrame : public ::omnetpp::cPacket
{
  protected:
    double pSend = 0;
    int channelNumber = 0;
    omnetpp::simtime_t duration = SIMTIME_ZERO;
    double bitrate = 0;
    double snr = 0;
    double lossRate = 0;
    double powRec = 0;
    inet::Coord senderPos;
    double carrierFrequency = 0;
    double bandwidth = 0;
    ModulationType modulationType;

  private:
    void copy(const AirFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AirFrame&);

  public:
    AirFrame(const char *name=nullptr, short kind=0);
    AirFrame(const AirFrame& other);
    virtual ~AirFrame();
    AirFrame& operator=(const AirFrame& other);
    virtual AirFrame *dup() const override {return new AirFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getPSend() const;
    virtual void setPSend(double pSend);
    virtual int getChannelNumber() const;
    virtual void setChannelNumber(int channelNumber);
    virtual omnetpp::simtime_t getDuration() const;
    virtual void setDuration(omnetpp::simtime_t duration);
    virtual double getBitrate() const;
    virtual void setBitrate(double bitrate);
    virtual double getSnr() const;
    virtual void setSnr(double snr);
    virtual double getLossRate() const;
    virtual void setLossRate(double lossRate);
    virtual double getPowRec() const;
    virtual void setPowRec(double powRec);
    virtual const inet::Coord& getSenderPos() const;
    virtual inet::Coord& getSenderPosForUpdate() { return const_cast<inet::Coord&>(const_cast<AirFrame*>(this)->getSenderPos());}
    virtual void setSenderPos(const inet::Coord& senderPos);
    virtual double getCarrierFrequency() const;
    virtual void setCarrierFrequency(double carrierFrequency);
    virtual double getBandwidth() const;
    virtual void setBandwidth(double bandwidth);
    virtual const ModulationType& getModulationType() const;
    virtual ModulationType& getModulationTypeForUpdate() { return const_cast<ModulationType&>(const_cast<AirFrame*>(this)->getModulationType());}
    virtual void setModulationType(const ModulationType& modulationType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AirFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AirFrame& obj) {obj.parsimUnpack(b);}

#endif // ifndef __AIRFRAME_M_H

