//
// Generated file, do not edit! Created by nedtool 5.5 from lte/stack/rlc/packet/LteRlcDataPdu.msg.
//

#ifndef __LTERLCDATAPDU_M_H
#define __LTERLCDATAPDU_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



class LteRlcDataPdu;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>lte/stack/rlc/packet/LteRlcDataPdu.msg:22</tt> by nedtool.
 * <pre>
 * class LteRlcDataPdu extends inet::FieldsChunk
 * {
 *     \@customize(true);
 * }
 * </pre>
 *
 * LteRlcDataPdu_Base is only useful if it gets subclassed, and LteRlcDataPdu is derived from it.
 * The minimum code to be written for LteRlcDataPdu is the following:
 *
 * <pre>
 * class INET_API LteRlcDataPdu : public LteRlcDataPdu_Base
 * {
 *   private:
 *     void copy(const LteRlcDataPdu& other) { ... }

 *   public:
 *     LteRlcDataPdu() : LteRlcDataPdu_Base() {}
 *     LteRlcDataPdu(const LteRlcDataPdu& other) : LteRlcDataPdu_Base(other) {copy(other);}
 *     LteRlcDataPdu& operator=(const LteRlcDataPdu& other) {if (this==&other) return *this; LteRlcDataPdu_Base::operator=(other); copy(other); return *this;}
 *     virtual LteRlcDataPdu *dup() const override {return new LteRlcDataPdu(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from LteRlcDataPdu_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(LteRlcDataPdu)
 * </pre>
 */
class INET_API LteRlcDataPdu_Base : public ::inet::FieldsChunk
{
  protected:

  private:
    void copy(const LteRlcDataPdu_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LteRlcDataPdu_Base&);
    // make constructors protected to avoid instantiation
    LteRlcDataPdu_Base();
    LteRlcDataPdu_Base(const LteRlcDataPdu_Base& other);
    // make assignment operator protected to force the user override it
    LteRlcDataPdu_Base& operator=(const LteRlcDataPdu_Base& other);

  public:
    virtual ~LteRlcDataPdu_Base();
    virtual LteRlcDataPdu_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class LteRlcDataPdu");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

#endif // ifndef __LTERLCDATAPDU_M_H

