//
// Generated file, do not edit! Created by nedtool 5.5 from lte/stack/d2dModeSelection/D2DModeSwitchNotification.msg.
//

#ifndef __D2DMODESWITCHNOTIFICATION_M_H
#define __D2DMODESWITCHNOTIFICATION_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



class D2DModeSwitchNotification;
#include "lte/common/LteCommonEnum_m.h" // import lte.common.LteCommonEnum

#include "lte/common/LteCommon_m.h" // import lte.common.LteCommon

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>lte/stack/d2dModeSelection/D2DModeSwitchNotification.msg:16</tt> by nedtool.
 * <pre>
 * //packet D2DModeSwitchNotification
 * class D2DModeSwitchNotification extends inet::FieldsChunk
 * {
 *     chunkLength = inet::B(1); // TODO: size 0
 *     unsigned int peerId;
 *     bool txSide;
 *     LteD2DMode oldMode;
 *     LteD2DMode newMode;
 *     bool oldConnection;
 *     bool interruptHarq;
 *     bool clearRlcBuffer;
 * }
 * </pre>
 */
class INET_API D2DModeSwitchNotification : public ::inet::FieldsChunk
{
  protected:
    unsigned int peerId = 0;
    bool txSide = false;
    LteD2DMode oldMode = static_cast<LteD2DMode>(-1);
    LteD2DMode newMode = static_cast<LteD2DMode>(-1);
    bool oldConnection = false;
    bool interruptHarq = false;
    bool clearRlcBuffer = false;

  private:
    void copy(const D2DModeSwitchNotification& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const D2DModeSwitchNotification&);

  public:
    D2DModeSwitchNotification();
    D2DModeSwitchNotification(const D2DModeSwitchNotification& other);
    virtual ~D2DModeSwitchNotification();
    D2DModeSwitchNotification& operator=(const D2DModeSwitchNotification& other);
    virtual D2DModeSwitchNotification *dup() const override {return new D2DModeSwitchNotification(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getPeerId() const;
    virtual void setPeerId(unsigned int peerId);
    virtual bool getTxSide() const;
    virtual void setTxSide(bool txSide);
    virtual LteD2DMode getOldMode() const;
    virtual void setOldMode(LteD2DMode oldMode);
    virtual LteD2DMode getNewMode() const;
    virtual void setNewMode(LteD2DMode newMode);
    virtual bool getOldConnection() const;
    virtual void setOldConnection(bool oldConnection);
    virtual bool getInterruptHarq() const;
    virtual void setInterruptHarq(bool interruptHarq);
    virtual bool getClearRlcBuffer() const;
    virtual void setClearRlcBuffer(bool clearRlcBuffer);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const D2DModeSwitchNotification& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, D2DModeSwitchNotification& obj) {obj.parsimUnpack(b);}

#endif // ifndef __D2DMODESWITCHNOTIFICATION_M_H

