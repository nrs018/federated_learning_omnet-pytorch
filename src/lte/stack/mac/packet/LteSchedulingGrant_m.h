//
// Generated file, do not edit! Created by nedtool 5.5 from lte/stack/mac/packet/LteSchedulingGrant.msg.
//

#ifndef __LTESCHEDULINGGRANT_M_H
#define __LTESCHEDULINGGRANT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



class LteSchedulingGrant;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>lte/stack/mac/packet/LteSchedulingGrant.msg:16</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class LteSchedulingGrant extends inet::FieldsChunk
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     chunkLength = inet::B(1); // TODO: size 0
 *     bool periodic;
 *     unsigned int period;
 *     unsigned int expiration;
 *        // blocks granted on all Remotes, all Bands
 *     unsigned int totalGrantedBlocks;
 *     // number of codewords
 *     unsigned int codewords;
 *     // granted bytes per codeword
 *     abstract unsigned int grantedCwBytes[];
 * 
 *     //#  in LteSchedulingGrant.h
 *     //# const UserTxParams* userTxParams;
 *     //# RbMap grantedBlocks;
 *     //#
 * }
 * </pre>
 *
 * LteSchedulingGrant_Base is only useful if it gets subclassed, and LteSchedulingGrant is derived from it.
 * The minimum code to be written for LteSchedulingGrant is the following:
 *
 * <pre>
 * class INET_API LteSchedulingGrant : public LteSchedulingGrant_Base
 * {
 *   private:
 *     void copy(const LteSchedulingGrant& other) { ... }

 *   public:
 *     LteSchedulingGrant() : LteSchedulingGrant_Base() {}
 *     LteSchedulingGrant(const LteSchedulingGrant& other) : LteSchedulingGrant_Base(other) {copy(other);}
 *     LteSchedulingGrant& operator=(const LteSchedulingGrant& other) {if (this==&other) return *this; LteSchedulingGrant_Base::operator=(other); copy(other); return *this;}
 *     virtual LteSchedulingGrant *dup() const override {return new LteSchedulingGrant(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from LteSchedulingGrant_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(LteSchedulingGrant)
 * </pre>
 */
class INET_API LteSchedulingGrant_Base : public ::inet::FieldsChunk
{
  protected:
    bool periodic = false;
    unsigned int period = 0;
    unsigned int expiration = 0;
    unsigned int totalGrantedBlocks = 0;
    unsigned int codewords = 0;

  private:
    void copy(const LteSchedulingGrant_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LteSchedulingGrant_Base&);
    // make constructors protected to avoid instantiation
    LteSchedulingGrant_Base();
    LteSchedulingGrant_Base(const LteSchedulingGrant_Base& other);
    // make assignment operator protected to force the user override it
    LteSchedulingGrant_Base& operator=(const LteSchedulingGrant_Base& other);

  public:
    virtual ~LteSchedulingGrant_Base();
    virtual LteSchedulingGrant_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class LteSchedulingGrant");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getPeriodic() const;
    virtual void setPeriodic(bool periodic);
    virtual unsigned int getPeriod() const;
    virtual void setPeriod(unsigned int period);
    virtual unsigned int getExpiration() const;
    virtual void setExpiration(unsigned int expiration);
    virtual unsigned int getTotalGrantedBlocks() const;
    virtual void setTotalGrantedBlocks(unsigned int totalGrantedBlocks);
    virtual unsigned int getCodewords() const;
    virtual void setCodewords(unsigned int codewords);
    virtual void setGrantedCwBytesArraySize(size_t size) = 0;
    virtual size_t getGrantedCwBytesArraySize() const = 0;
    virtual unsigned int getGrantedCwBytes(size_t k) const = 0;
    virtual void setGrantedCwBytes(size_t k, unsigned int grantedCwBytes) = 0;
    virtual void insertGrantedCwBytes(unsigned int grantedCwBytes) = 0;
    virtual void insertGrantedCwBytes(size_t k, unsigned int grantedCwBytes) = 0;
    virtual void eraseGrantedCwBytes(size_t k) = 0;
};

#endif // ifndef __LTESCHEDULINGGRANT_M_H

